Let me create a clean implementation plan:

1. Fix the TypeScript error with `params` being possibly null âœ… (already done)
2. Fix the React hook dependency issue by:
   - Making fetchQuizData use useCallback
   - Adding fetchSubjectsAndTopics as a dependency to fetchQuizData
   - Adding a proper useEffect to call fetchQuizData

Here's the structure:

```tsx
// Fix #1: Type-safe params
const params = useParams<{ quizId: string }>();
const quizId = params?.quizId || '';

// Fix #2: Memoize fetchSubjectsAndTopics with useCallback
const fetchSubjectsAndTopics = useCallback(async () => {
  // Function body here...
}, []);

// Fix #3: Memoize fetchQuizData with useCallback
const fetchQuizData = useCallback(async () => {
  // Function body here...
}, [quizId, fetchSubjectsAndTopics]);

// Fix #4: Proper useEffect with the correct dependency
useEffect(() => {
  fetchQuizData();
}, [fetchQuizData]);

// Fix #5: Filter topics useEffect
useEffect(() => {
  if (subjectId) {
    const filtered = topics.filter((topic) => topic.subject_id === subjectId);
    setFilteredTopics(filtered);
  } else {
    setFilteredTopics([]);
  }
}, [subjectId, topics]);
```
