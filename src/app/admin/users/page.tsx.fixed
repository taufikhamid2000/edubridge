'use client';

import { useEffect, useState } from 'react';
import { logger } from '@/lib/logger';
import AdminNavigation from '@/components/admin/AdminNavigation';
import Image from 'next/image';

// Define the structure of the user data after processing
interface User {
  id: string;
  email: string;
  display_name?: string | null;
  avatar_url: string | null;
  level: number;
  xp: number;
  created_at: string;
  role: string;
}

export default function AdminUsersPage() {
  const [users, setUsers] = useState<User[]>([]);
  const [loading, setLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState('');
  const [error, setError] = useState<string | null>(null);
  const [successMessage, setSuccessMessage] = useState<string | null>(null);

  // Clear success message after 5 seconds
  useEffect(() => {
    if (successMessage) {
      const timer = setTimeout(() => {
        setSuccessMessage(null);
      }, 5000);
      return () => clearTimeout(timer);
    }
  }, [successMessage]);

  useEffect(() => {
    fetchUsers();
  }, []);

  async function fetchUsers() {
    try {
      setLoading(true);
      setError(null);

      console.log('Attempting to fetch users via client-side service...');

      // Use the adminService directly instead of API route
      const { fetchAdminUsers } = await import('@/services/adminService');
      const { data, error } = await fetchAdminUsers();

      if (error) {
        throw error;
      }

      if (!data) {
        throw new Error('No data returned from admin service');
      }

      setUsers(data);

      // Log for debugging
      if (data.length > 0) {
        console.log('First user data:', data[0]);
      } else {
        console.log('No user data returned');
      }
    } catch (error) {
      const errorMessage =
        error instanceof Error ? error.message : String(error);
      logger.error('Error fetching users:', error);
      setError(errorMessage);

      // More detailed error logging
      console.error('User fetch error details:', {
        error,
        message: errorMessage,
        timestamp: new Date().toISOString(),
      });
    } finally {
      setLoading(false);
    }
  }

  async function handleRoleChange(userId: string, role: string) {
    try {
      setError(null);
      setSuccessMessage(null);

      // Find the user we're updating for UI feedback
      const targetUser = users.find((user) => user.id === userId);
      const userName = targetUser?.display_name || 'User';

      // Set loading state
      setLoading(true);

      // Use the client-side service instead of API endpoint
      console.log('Updating user role via client-side service...');
      const { updateUserRole } = await import('@/services/adminService');
      const success = await updateUserRole(
        userId,
        role as 'admin' | 'moderator' | 'user'
      );

      if (!success) {
        throw new Error('Failed to update user role');
      }

      // Update the local state
      setUsers(
        users.map((user) => (user.id === userId ? { ...user, role } : user))
      );

      // Show success message
      const message = `Role updated successfully: ${userName} is now ${role}`;
      logger.log(message);
      setSuccessMessage(message);
    } catch (error) {
      const errorMessage =
        error instanceof Error ? error.message : String(error);
      setError(`Role update failed: ${errorMessage}`);
      logger.error('Error updating user role:', error);
    } finally {
      setLoading(false);
    }
  }

  const filteredUsers = users.filter(
    (user) =>
      (user.email &&
        user.email.toLowerCase().includes(searchTerm.toLowerCase())) ||
      (user.display_name &&
        user.display_name.toLowerCase().includes(searchTerm.toLowerCase()))
  );

  return (
    <div className="min-h-screen bg-gray-50 dark:bg-gray-900">
      <div className="flex">
        <AdminNavigation />
        <div className="flex-1 p-8">
          <div className="flex justify-between items-center mb-6">
            <div className="flex items-center">
              <h1 className="text-3xl font-bold dark:text-white mr-4">
                Users Management
              </h1>
              <button
                onClick={() => fetchUsers()}
                className="px-3 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 flex items-center space-x-1 dark:bg-blue-600 dark:hover:bg-blue-700"
                disabled={loading}
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  className="h-4 w-4"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"
                  />
                </svg>
                <span>Refresh</span>
              </button>
            </div>
            <div className="relative">
              <input
                type="text"
                placeholder="Search users..."
                className="px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
              />
            </div>
          </div>

          {error && (
            <div className="mb-4 p-4 bg-red-100 border border-red-400 text-red-700 rounded dark:bg-red-900 dark:border-red-700 dark:text-red-300">
              <div className="flex justify-between">
                <div>
                  <p className="font-bold">Error:</p>
                  <p>{error}</p>
                </div>
                <button
                  onClick={() => fetchUsers()}
                  className="bg-red-200 hover:bg-red-300 text-red-800 font-bold py-2 px-4 rounded dark:bg-red-800 dark:hover:bg-red-700 dark:text-red-200"
                >
                  Retry
                </button>
              </div>
            </div>
          )}
          
          {successMessage && (
            <div className="mb-4 p-4 bg-green-100 border border-green-400 text-green-700 rounded dark:bg-green-900 dark:border-green-700 dark:text-green-300">
              <div className="flex justify-between">
                <div>
                  <p className="font-bold">Success:</p>
                  <p>{successMessage}</p>
                </div>
                <button
                  onClick={() => setSuccessMessage(null)}
                  className="bg-green-200 hover:bg-green-300 text-green-800 font-bold py-2 px-4 rounded dark:bg-green-800 dark:hover:bg-green-700 dark:text-green-200"
                >
                  Dismiss
                </button>
              </div>
            </div>
          )}

          <div className="bg-white dark:bg-gray-800 rounded-lg shadow overflow-hidden">
            {loading ? (
              <div className="p-4 flex justify-center">
                <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500 dark:border-blue-400"></div>
              </div>
            ) : (
              <table className="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
                <thead className="bg-gray-50 dark:bg-gray-700">
                  <tr>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                      User
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                      Email
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                      Level/XP
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                      Joined
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                      Role
                    </th>
                    <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                      Actions
                    </th>
                  </tr>
                </thead>
                <tbody className="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700">
                  {filteredUsers.length === 0 ? (
                    <tr>
                      <td
                        colSpan={6}
                        className="px-6 py-4 text-center text-gray-500 dark:text-gray-400"
                      >
                        {searchTerm
                          ? 'No users found matching your search.'
                          : 'No users found in the system.'}
                      </td>
                    </tr>
                  ) : (
                    filteredUsers.map((user) => (
                      <tr key={user.id}>
                        <td className="px-6 py-4 whitespace-nowrap">
                          <div className="flex items-center">
                            <div className="flex-shrink-0 h-10 w-10">
                              {user.avatar_url ? (
                                <Image
                                  className="h-10 w-10 rounded-full object-cover"
                                  src={user.avatar_url}
                                  alt={user.display_name || 'User avatar'}
                                  width={40}
                                  height={40}
                                  unoptimized={user.avatar_url.startsWith(
                                    'data:'
                                  )}
                                />
                              ) : (
                                <div className="h-10 w-10 rounded-full bg-gray-300 flex items-center justify-center">
                                  <span className="text-gray-600 font-medium">
                                    {user.display_name &&
                                    user.display_name.length > 0
                                      ? user.display_name
                                          .charAt(0)
                                          .toUpperCase()
                                      : user.email && user.email.length > 0
                                        ? user.email.charAt(0).toUpperCase()
                                        : '?'}
                                  </span>
                                </div>
                              )}
                            </div>
                            <div className="ml-4">
                              <div className="text-sm font-medium text-gray-900 dark:text-gray-100">
                                {user.display_name || 'Unnamed User'}
                              </div>
                              <div className="text-sm text-gray-500 dark:text-gray-400">
                                ID: {user.id.slice(0, 8)}...
                              </div>
                            </div>
                          </div>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">
                          {user.email || 'No email'}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap">
                          <div className="text-sm text-gray-900 dark:text-gray-100">
                            Level {user.level}
                          </div>
                          <div className="text-sm text-gray-500 dark:text-gray-400">
                            {user.xp} XP
                          </div>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">
                          {new Date(user.created_at).toLocaleDateString()}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap">
                          <select
                            value={user.role}
                            onChange={(e) =>
                              handleRoleChange(user.id, e.target.value)
                            }
                            className="text-sm border rounded py-1 px-2 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
                          >
                            <option value="user">User</option>
                            <option value="admin">Admin</option>
                            <option value="moderator">Moderator</option>
                          </select>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                          <button className="text-blue-600 hover:text-blue-900 dark:text-blue-400 dark:hover:text-blue-300">
                            View
                          </button>
                          <span className="mx-2 dark:text-gray-400">|</span>
                          <button className="text-red-600 hover:text-red-900 dark:text-red-400 dark:hover:text-red-300">
                            Disable
                          </button>
                        </td>
                      </tr>
                    ))
                  )}
                </tbody>
              </table>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}
